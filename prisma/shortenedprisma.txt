// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId             String              @unique
  email               String              @unique
  firstname           String?
  lastname            String?
  phone               String?             @unique
  phoneVerified       Boolean             @default(false)
  isAdmin             Boolean             @default(false)
  isInfluencer        Boolean             @default(false)
  isABusiness         Boolean             @default(false)
  createdAt           DateTime            @default(now())
  subscription        Subscription?
  integrations        Integrations[]
  automations         Automation[]
  businessHours       BusinessHours?
  businesses          Business[]
  marketingInfo       MarketingInfo[]
  scheduledContent    ScheduledContent[]
  auditLogs           AuditLog[]
  sentMessages        ChatMessage[]       @relation("SentMessages")
  receivedMessages    ChatMessage[]       @relation("ReceivedMessages")
  notifications       UserNotification[]
  emails              Email[]
  uploadedAttachments ChatAttachment[]    @relation("UploadedAttachments")
  receivedAttachments ChatAttachment[]    @relation("ReceivedAttachments")
  invoices            Invoice[]           @relation("UserInvoices")
  payments            Payment[]           @relation("UserPayments")
  referralCodes       ReferralCode[]      @relation("UserReferralCodes")
  referrals           Referral[]          @relation("UserReferrals")
  referredBy          Referral[]          @relation("ReferredUsers")
  commissionPayouts   CommissionPayout[]  @relation("UserCommissionPayouts")
  referredByCode      String?
  affiliate           AffiliateUser?
  affiliateReferrals  AffiliateReferral[] @relation("referredUser")
  whatsAppBusinesses  WhatsAppBusiness[]
  whatsAppRules       WhatsAppRule[]
  whatsAppTemplates   WhatsAppTemplate[]

  leads                 Lead[]
  leadScoringRules      LeadScoringRule[]
  leadQualificationRule LeadQualificationRule[]
  leadNurturingSequence LeadNurturingSequence[]
  crmIntegration        CrmIntegration[]
  n8nConnection         N8nConnection[]
  n8nWorkflows          N8nWorkflow[]
  leadTag               LeadTag[]
  userWorkflow          UserWorkflow[]
  customWorkflowRequest CustomWorkflowRequest[]

  influencers         Influencer[]
  campaigns           Campaign[]
  influencerLists     InfluencerList[]
  influencerImports   InfluencerImport[]
  portalSettings      PortalSettings[]
  aiDiscoverySettings AIDiscoverySettings?
  dataSourceSettings  DataSourceSettings?

  importHistory        ImportHistory[]
  instagramCredentials InstagramCredentials?

  businessProfile             BusinessProfile?
  businessProfilesDescription BusinessProfileDescription[]
  savedSearches               SavedSearch[]
  chatParticipations          CollabChatParticipant[]

  onboardingProgress OnboardingProgress?

  handoffSettings HandoffSettings?
  handoffs        HumanHandoff[]
  responseMetrics ResponseMetrics[]

  preferences     UserPreferences?
  crmSyncSettings CrmSyncSettings?

  premiumAnalytics     PremiumAnalytics[]
  revenueMetrics       RevenueMetrics[]
  revenueOpportunities RevenueOpportunity[]

  businessWorkflowConfigs BusinessWorkflowConfig[]

  generalNotifications GeneralNotification[]

  webhookNotifications Notification[]
  alerts               Alert[]

  adminWorkflowAssignments AdminWorkflowAssignment[]
}

model ScheduledContent {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instagramPostId  String?     @unique
  caption          String
  mediaType        String
  mediaUrl         String
  thumbnailUrl     String?
  permalink        String?
  scheduledDate    DateTime
  publishedDate    DateTime?
  mediaProductType String?
  automation       Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String?     @db.Uuid
  status           String      @default("scheduled")
  User             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?     @db.Uuid
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model MarketingInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?
  phone     String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}

model Business {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String?
  businessName              String
  businessType              String
  businessDescription       String
  industry                  String
  automationSetupComplete   Boolean   @default(false)
  automationSetupDate       DateTime?
  automationAdditionalNotes String?
  automationGoals           Json?
  customerJourney           Json?
  features                  Json?
  businessTypeData          Json?
  websiteAnalysis           Json?
  targetAudience            String
  website                   String
  instagramHandle           String
  whatsappNumber            String? 
  pinterestHandle           String? 
  twitterHandle             String? 
  facebookPageId            String?
  linkedinProfileId         String?
  tiktokHandle              String?
  welcomeMessage            String
  responseLanguage          String
  businessHours             String
  autoReplyEnabled          Boolean
  promotionMessage          String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  User                      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String?   @db.Uuid

  learningTopics      String[]
  growthChallenges    String[]
  goalStatement       String?
  logo                String?
  location            String?
  size                String?
  influencerRatings   InfluencerRating[]
  campaigns           Campaign[]
  opportunities       Opportunity[]
  savedSearches       SavedSearch[]
  chatParticipations  CollabChatParticipant[]
  onboardingCompleted Boolean                 @default(false)

  handoffs         HumanHandoff[]
  agentAssignments AgentBusinessAssignment[]
  handoffSettings  HandoffSettings[]
  agentPerformance AgentPerformance[]

  generalNotifications GeneralNotification[]

  workflowConfigs BusinessWorkflowConfig[]
}

model Integrations {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      INTEGRATIONS @default(INSTAGRAM)
  createdAt DateTime     @default(now())
  User      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?      @db.Uuid
  token     String       @unique
  expiresAt DateTime?

  // Instagram-specific fields
  instagramId    String? @unique
  username       String?
  fullName       String?
  profilePicture String?
  followersCount Int?
  followingCount Int?
  postsCount     Int?

  // WhatsApp-specific fields
  phoneNumberId String? @unique
  phoneNumber   String?

  // Facebook-specific fields
  pageId   String? @unique
  pageName String?

  // Pinterest-specific fields
  pinterestId String? @unique
  boardCount  Int?

  // Twitter-specific fields
  twitterId  String? @unique
  tweetCount Int?

  // LinkedIn-specific fields
  linkedinId String? @unique

  // TikTok-specific fields
  tiktokId String? @unique

  lastUpdated DateTime @default(now())
}

model Automation {
  id                          String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                        String                      @default("New Automation")
  createdAt                   DateTime                    @default(now())
  isFallback                  Boolean                     @default(false)
  active                      Boolean                     @default(false)
  platform                    INTEGRATIONS                @default(INSTAGRAM) // Added to specify which platform this automation is for
  trigger                     Trigger[]
  businessProfilesDescription BusinessProfileDescription?
  listenMode                  String                      @default("KEYWORDS") // "KEYWORDS" | "ALL_MESSAGES"
  listener                    Listener?
  posts                       Post[]
  leads                       Lead[]
  dms                         Dms[]
  messages                    Message[]
  conversations               Conversation[]
  User                        User?                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String?                     @db.Uuid
  keywords                    Keyword[]
  scheduledPosts              ScheduledContent[]
  handoffs                    HumanHandoff[]
  responseMetrics             ResponseMetrics[]

  fallbackMessage String?
  buttons         Json? // Store as JSON array

  messageTrackers   MessageTracker[]
  sentimentAnalyses SentimentAnalysis[]

  workflowExecutionLogs WorkflowExecutionLog[]

  businessWorkflowConfigId String?                 @db.Uuid // NEW: Link to BusinessWorkflowConfig
  businessWorkflowConfig   BusinessWorkflowConfig? @relation(fields: [businessWorkflowConfigId], references: [id], onDelete: SetNull)
}

model Message {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String
  senderId     String
  message      String
  isFromBot    Boolean
  createdAt    DateTime    @default(now())
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Conversation {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String      @unique
  messages     Json[] // This will store an array of message objects
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model ConversationState {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String       @unique
  isActive          Boolean      @default(false)
  lastTriggerType   String? // Track what triggered the conversation
  lastTriggerReason String? // Why it was triggered
  triggerHistory    Json? // History of triggers for this conversation
  customerType      CustomerType @default(NEW) // NEW, RETURNING, VIP
  interactionCount  Int          @default(0)
  lastInteractionAt DateTime     @default(now())
  sentiment         Float? // Overall conversation sentiment (-1 to 1)

  lastMessageLength   Int?
  averageResponseTime Float?
  isInHandoff         Boolean @default(false)
  handoffReason       String?

  automationId String? // Track which automation is handling this conversation
  listenMode   String? // Track the current listen mode

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isActive])
  @@index([customerType])
  @@index([lastInteractionAt])
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  lastComment  String?
  lastDm       String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                String // Keep existing field for backward compatibility
  triggerMode         TriggerMode @default(KEYWORD) // New field for enhanced triggers
  configuration       Json? // Store trigger-specific configuration
  priority            Int         @default(1) // Higher number = higher priority
  confidenceThreshold Float       @default(0.5) // Minimum confidence to trigger
  businessHoursOnly   Boolean     @default(false) // Only trigger during business hours
  isActive            Boolean     @default(true)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  Automation          Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String?     @db.Uuid

  // Relations
  executions TriggerExecution[]
  analytics  TriggerAnalytics[]

  @@index([automationId])
  @@index([triggerMode])
  @@index([isActive])
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

enum INTEGRATIONS {
  INSTAGRAM
  WHATSAPP
  FACEBOOK
  PINTEREST
  TWITTER
  LINKEDIN
  TIKTOK
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  type      String // email_sent, high_value_lead, lead_qualified, crm_sync, etc.
  title     String
  message   String   @db.Text
  priority  String   @default("medium") // low, medium, high, urgent
  data      Json? // Additional notification data
  leadId    String?  @db.Uuid
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  lead Lead? @relation(fields: [leadId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([read])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  action    String
  target    String
  details   String?
  entityId  String?  @db.Uuid
  metadata  Json? // Store additional data like reason, instagramId
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

model Incident {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  severity    String // "low", "medium", "high", "critical"
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
}

model ChatMessage {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  senderId    String   @db.Uuid
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String?  @db.Uuid
  receiver    User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isFromAdmin Boolean  @default(false)
  isPending   Boolean  @default(false)
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserNotification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String // "chat", "automation", "subscription", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageTemplate {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  content    String
  category   String?
  tags       String[]
  usageCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmailTemplate {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  subject     String
  content     String          @db.Text
  description String?
  category    String          @default("general")
  isDefault   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  emails      Email[]
  campaigns   EmailCampaign[]
}

model Email {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject      String
  content      String         @db.Text
  recipientId  String         @db.Uuid
  recipient    User           @relation(fields: [recipientId], references: [id])
  templateId   String?        @db.Uuid
  template     EmailTemplate? @relation(fields: [templateId], references: [id])
  campaignId   String?        @db.Uuid
  campaign     EmailCampaign? @relation(fields: [campaignId], references: [id])
  status       EmailStatus    @default(SCHEDULED)
  scheduledFor DateTime?
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}


// Lead Qualification Models
model Lead {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String                 @db.Uuid
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  automationId         String?                @db.Uuid
  automation           Automation?            @relation(fields: [automationId], references: [id], onDelete: SetNull)
  instagramUserId      String
  pageId               String
  name                 String?
  email                String?
  phone                String?
  score                Int                    @default(0)
  status               LeadStatus             @default(NEW)
  source               String                 @default("instagram")
  firstContactDate     DateTime               @default(now())
  lastContactDate      DateTime               @default(now())
  qualifiedDate        DateTime?
  convertedDate        DateTime?
  notes                String?
  tags                 String[]
  metadata             Json?
  sentToN8n            Boolean                @default(false)
  n8nWorkflowId        String?
  n8nExecutionId       String?
  interactions         LeadInteraction[]
  revenueOpportunities RevenueOpportunity[]
  scheduledActions     ScheduledAction[]
  qualificationData    LeadQualificationData?

  notifications Notification[]
  alerts        Alert[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([instagramUserId, pageId], name: "instagramUserId_pageId")
  @@index([userId])
  @@index([automationId])
  @@index([status])
  @@index([instagramUserId])
  @@index([sentToN8n])
}

model LeadInteraction {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId    String   @db.Uuid
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  type      String // message, comment, reaction
  content   String?
  direction String // inbound, outbound
  sentiment Float? // -1.0 to 1.0
  intent    Json? // Detected intents like purchase_intent, information_request
  timestamp DateTime @default(now())
  metadata  Json?

  @@index([leadId])
  @@index([timestamp])
}

model LeadQualificationData {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId            String   @unique @db.Uuid
  lead              Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  engagementScore   Int      @default(0)
  intentScore       Int      @default(0)
  sentimentScore    Int      @default(0)
  demographicScore  Int      @default(0)
  frequencyScore    Int      @default(0)
  recencyScore      Int      @default(0)
  revenueScore      Int?     @default(0)
  leadTier          String? // PLATINUM, GOLD, SILVER, BRONZE
  estimatedValue    Decimal? @db.Decimal(10, 2)
  roi               Decimal? @db.Decimal(5, 2)
  qualificationData Json?
  aiAnalysis        Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LeadScoringRule {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  ruleType    String // keyword, sentiment, frequency, recency, etc.
  condition   String // contains, equals, greater_than, etc.
  value       String // The value to compare against
  score       Int // Points to add/subtract when rule matches
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([ruleType])
}

model N8nWorkflow {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String    @db.Uuid
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  workflowId     String // ID in n8n system
  triggerUrl     String? // Webhook URL to trigger this workflow
  isActive       Boolean   @default(true)
  lastExecuted   DateTime?
  executionCount Int       @default(0)
  successCount   Int       @default(0)
  failureCount   Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])
  @@index([workflowId])
}

enum LeadStatus {
  NEW
  QUALIFYING
  QUALIFIED
  DISQUALIFIED
  CONVERTED
  NURTURING
  LOST
}

/////////////////////


// CRM Integration Models
model CrmIntegration {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String            @db.Uuid
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider       CrmProvider
  name           String
  apiKey         String
  apiSecret      String?
  baseUrl        String?
  isActive       Boolean           @default(true)
  lastSynced     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  mappings       CrmFieldMapping[]
  accessToken    String? // For OAuth integrations
  refreshToken   String? // For OAuth token refresh
  tokenExpiresAt DateTime? // Token expiration
  metadata       Json?

  @@index([userId])
  @@index([provider])
}

model CrmFieldMapping {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  integrationId     String         @db.Uuid
  integration       CrmIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  localField        String // Field in our system
  remoteField       String // Field in CRM
  isRequired        Boolean        @default(false)
  transformFunction String? // Optional JS function to transform data
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([integrationId])
}

// Enhanced Lead Qualification Models
model LeadQualificationRule {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String       @db.Uuid
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  scoreType   ScoreType    @default(OVERALL)
  operator    RuleOperator @default(GREATER_THAN)
  threshold   Int // Value to compare against
  weight      Int          @default(1) // Importance of this rule
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@index([scoreType])
}

model LeadNurturingSequence {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String              @db.Uuid
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  steps       LeadNurturingStep[]

  @@index([userId])
}

model LeadNurturingStep {
  id         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sequenceId String                @db.Uuid
  sequence   LeadNurturingSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  stepNumber Int
  name       String
  type       NurturingStepType     @default(MESSAGE)
  content    String?
  delayDays  Int                   @default(0)
  delayHours Int                   @default(0)
  conditions Json? // Conditions for executing this step
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  @@index([sequenceId])
  @@index([type])
}

model LeadActivity {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId       String   @db.Uuid
  activityType String // email_sent, message_sent, viewed_page, etc.
  description  String?
  metadata     Json?
  timestamp    DateTime @default(now())

  @@index([leadId])
  @@index([activityType])
  @@index([timestamp])
}

model LeadTag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  color     String   @default("#6366F1") // Default indigo color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

// Enums for the new models
enum WorkflowType {
  LEAD_QUALIFICATION
  LEAD_NURTURING
  CRM_SYNC
  NOTIFICATION
  CUSTOM
}

enum CrmProvider {
  HUBSPOT
  SALESFORCE
  ZOHO
  PIPEDRIVE
  AIRTABLE
  NOTION
  CUSTOM
}

enum ScoreType {
  OVERALL
  ENGAGEMENT
  INTENT
  SENTIMENT
  FREQUENCY
  RECENCY
}

enum RuleOperator {
  GREATER_THAN
  LESS_THAN
  EQUAL_TO
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
}

enum NurturingStepType {
  MESSAGE
  EMAIL
  WEBHOOK
  DELAY
  CONDITION
  CRM_UPDATE
}


enum SUBSCRIPTION_PLAN {
  FREE
  PRO
  TEAM
}

enum SUBSCRIPTION_STATUS {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  plan   SUBSCRIPTION_PLAN   @default(FREE)
  status SUBSCRIPTION_STATUS @default(ACTIVE)

  // Stripe specific fields
  customerId               String?   @unique
  stripeSubscriptionId     String?   @unique
  stripePriceId            String?
  stripeCurrentPeriodStart DateTime?
  stripeCurrentPeriodEnd   DateTime?

  // Payment method info
  paymentMethodId    String?
  paymentMethodType  String?
  paymentMethodLast4 String?

  // Trial information
  trialStart DateTime?
  trialEnd   DateTime?

  // Cancellation fields
  cancelAtPeriodEnd Boolean   @default(false)
  canceledAt        DateTime?
}

/////NEWESSST

model TriggerExecution {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  triggerId      String      @db.Uuid
  trigger        Trigger     @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  automationId   String      @db.Uuid
  userId         String      @db.Uuid
  messageContent String // The message that triggered this
  triggerType    TriggerMode
  confidence     Float? // Confidence score (0-1)
  reason         String? // Why this trigger fired
  success        Boolean     @default(false)
  responseTime   Int? // Time to process in milliseconds
  errorMessage   String?
  metadata       Json? // Additional execution data
  timestamp      DateTime    @default(now())

  @@index([triggerId])
  @@index([automationId])
  @@index([userId])
  @@index([triggerType])
  @@index([timestamp])
}

model TriggerAnalytics {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  triggerId            String   @db.Uuid
  trigger              Trigger  @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  date                 DateTime @default(now())
  totalExecutions      Int      @default(0)
  successfulExecutions Int      @default(0)
  failedExecutions     Int      @default(0)
  averageConfidence    Float? // Average confidence score
  averageResponseTime  Int? // Average response time in ms
  spamFiltered         Int      @default(0) // Messages filtered as spam
  conversionRate       Float? // Percentage that led to meaningful conversations

  @@unique([triggerId, date])
  @@index([triggerId])
  @@index([date])
}

model AIAnalysisCache {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  messageHash      String   @unique // Hash of the message content
  analysis         Json // Cached AI analysis result
  confidence       Float // Confidence score from AI
  intent           String? // Detected intent
  sentiment        Float? // Sentiment score
  isSpam           Boolean  @default(false)
  businessRelevant Boolean  @default(true)
  expiresAt        DateTime // Cache expiration
  createdAt        DateTime @default(now())

  @@index([messageHash])
  @@index([expiresAt])
  @@index([isSpam])
}

model BusinessHours {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @unique @db.Uuid
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timezone       String   @default("UTC")
  mondayStart    String? // "09:00"
  mondayEnd      String? // "17:00"
  tuesdayStart   String?
  tuesdayEnd     String?
  wednesdayStart String?
  wednesdayEnd   String?
  thursdayStart  String?
  thursdayEnd    String?
  fridayStart    String?
  fridayEnd      String?
  saturdayStart  String?
  saturdayEnd    String?
  sundayStart    String?
  sundayEnd      String?
  holidays       Json? // Array of holiday dates
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model WebhookPerformance {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String   @db.Uuid
  date                DateTime @default(now())
  totalRequests       Int      @default(0)
  successfulRequests  Int      @default(0)
  failedRequests      Int      @default(0)
  averageResponseTime Int? // Average response time in ms
  triggerBreakdown    Json? // Breakdown by trigger type
  errorBreakdown      Json? // Breakdown of error types
  peakHour            Int? // Hour with most activity (0-23)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// Add these enums
enum TriggerMode {
  KEYWORD
  UNIVERSAL
  AI_SMART
  TIME_BASED
  EVENT_BASED
}

enum CustomerType {
  NEW
  RETURNING
  VIP
  SPAM
}

model ProcessedMessage {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  messageKey   String   @unique
  createdAt    DateTime @default(now())
  processCount Int      @default(1) // NEW: Track how many times we've seen this message
  updatedAt    DateTime @updatedAt // NEW: Track when it was last updated

  @@index([messageKey])
  @@index([createdAt])
  @@index([processCount]) // NEW: Index for analytics queries
}

// Add these NEW models to your existing schema.prisma file

// Multi-tenant Human Handoff Models
model HumanHandoff {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String           @db.Uuid
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId       String           @db.Uuid // NEW: Business isolation
  business         Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  pageId           String // Instagram page ID
  senderId         String // Customer/sender ID
  automationId     String?          @db.Uuid
  automation       Automation?      @relation(fields: [automationId], references: [id], onDelete: SetNull)
  reason           String // Why handoff was initiated
  priority         HandoffPriority  @default(MEDIUM)
  status           HandoffStatus    @default(PENDING)
  context          String?          @db.Text // Conversation context, customer info, etc.
  assignedAgentId  String?          @db.Uuid
  assignedAgent    Agent?           @relation(fields: [assignedAgentId], references: [id], onDelete: SetNull)
  createdAt        DateTime         @default(now())
  assignedAt       DateTime?
  completedAt      DateTime?
  resolution       String?          @db.Text
  customerWaitTime Int? // Time in seconds customer waited for agent
  n8nWorkflowId    String? // ID of n8n workflow that processed this handoff
  n8nExecutionId   String? // ID of n8n execution
  messages         HandoffMessage[]
  notes            HandoffNote[]

  @@index([userId])
  @@index([businessId]) // NEW: Index for business isolation
  @@index([status])
  @@index([priority])
  @@index([assignedAgentId])
  @@index([pageId, senderId])
  @@index([businessId, status]) // NEW: Composite index for business-specific queries
}

model HandoffMessage {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  handoffId       String       @db.Uuid
  handoff         HumanHandoff @relation(fields: [handoffId], references: [id], onDelete: Cascade)
  content         String       @db.Text
  isFromCustomer  Boolean      @default(false)
  isFromAgent     Boolean      @default(false)
  isSystemMessage Boolean      @default(false)
  timestamp       DateTime     @default(now())

  @@index([handoffId])
  @@index([timestamp])
}

model HandoffNote {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  handoffId String       @db.Uuid
  handoff   HumanHandoff @relation(fields: [handoffId], references: [id], onDelete: Cascade)
  content   String       @db.Text
  createdBy String // User ID or system
  createdAt DateTime     @default(now())

  @@index([handoffId])
}

model Agent {
  id                  String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  email               String                    @unique
  slackUserId         String? // Slack user ID for notifications
  isActive            Boolean                   @default(true)
  isAvailable         Boolean                   @default(true)
  maxConcurrent       Int                       @default(3) // Maximum concurrent handoffs
  skills              String[] // e.g., ["sales", "support", "technical"]
  languages           String[] // e.g., ["en", "es", "fr"]
  timezone            String                    @default("UTC")
  workingHours        Json? // Working hours configuration
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  handoffs            HumanHandoff[]
  businessAssignments AgentBusinessAssignment[] // NEW: Business assignments
  performance         AgentPerformance[] // NEW: Performance tracking

  @@index([isActive, isAvailable])
  @@index([skills])
  @@index([languages])
}

// NEW: Agent-Business assignment model for multi-tenancy
model AgentBusinessAssignment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agentId    String   @db.Uuid
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  businessId String   @db.Uuid
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  isActive   Boolean  @default(true)
  role       String   @default("agent") // agent, supervisor, manager
  assignedAt DateTime @default(now())
  assignedBy String?  @db.Uuid // User who assigned this agent

  @@unique([agentId, businessId])
  @@index([businessId, isActive])
  @@index([agentId, isActive])
}

model HandoffSettings {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String          @unique @db.Uuid
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId        String          @db.Uuid // NEW: Business reference
  business          Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  isEnabled         Boolean         @default(true)
  notificationEmail String?
  slackWebhookUrl   String?
  slackChannel      String? // Business-specific channel
  teamsWebhookUrl   String?
  n8nWorkflowId     String? // ID of n8n workflow for handoffs
  defaultPriority   HandoffPriority @default(MEDIUM)
  businessHoursOnly Boolean         @default(false)
  autoAssign        Boolean         @default(true)
  maxWaitTime       Int             @default(300) // Max wait time in seconds before escalation
  routingRules      Json? // Business-specific routing rules
  escalationRules   Json? // Escalation rules for this business
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([businessId])
}

model MessageDeliveryLog {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId      String
  recipientId String
  message     String   @db.Text
  type        String // DM or COMMENT
  success     Boolean
  error       String?
  timestamp   DateTime @default(now())

  @@index([pageId, recipientId])
  @@index([timestamp])
  @@index([success])
}

model ResponseMetrics {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId  String     @db.Uuid
  automation    Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  userId        String     @db.Uuid
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageLength Int
  responseTime  Int // in milliseconds
  typingDelay   Int // in milliseconds
  wasSuccessful Boolean
  messageType   String // DM or COMMENT
  hasButtons    Boolean
  sentiment     String? // positive, neutral, negative
  priority      String? // LOW, MEDIUM, HIGH, URGENT
  timestamp     DateTime   @default(now())

  @@index([automationId])
  @@index([userId])
  @@index([timestamp])
}

// NEW: Business-specific agent performance tracking
model AgentPerformance {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  agentId              String   @db.Uuid
  agent                Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  businessId           String   @db.Uuid
  business             Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  date                 DateTime @db.Date
  handoffsHandled      Int      @default(0)
  avgResponseTime      Int? // Average response time in seconds
  avgResolutionTime    Int? // Average resolution time in seconds
  customerSatisfaction Float? // Average satisfaction score

  @@unique([agentId, businessId, date])
  @@index([businessId, date])
  @@index([agentId, date])
}

enum HandoffStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TRANSFERRED
}

enum HandoffPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model UserPreferences {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String   @unique @db.Uuid
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  soundEnabled         Boolean  @default(true)
  desktopNotifications Boolean  @default(true)
  emailNotifications   Boolean  @default(false)
  autoMarkAsRead       Boolean  @default(false)
  theme                String   @default("system")
  language             String   @default("en")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("user_preferences")
}

model MessageTracker {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId  String   @db.Uuid
  pageId        String
  senderId      String
  messageCount  Int      @default(0)
  messages      String[]
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  automation Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  // Composite unique constraint
  @@unique([automationId, pageId, senderId])
  @@index([automationId])
  @@index([lastMessageAt])
}

model SentimentAnalysis {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId   String   @db.Uuid
  pageId         String
  senderId       String
  sentiment      String // "positive", "negative", "neutral"
  confidence     Float
  messages       String[] // The 4 messages that were analyzed
  sentimentScore Float? // Additional sentiment score
  metrics        String? // JSON string of metrics data
  emotions       String? // JSON string of emotions data
  insights       String? // JSON string of insights data
  metadata       String? // JSON string of metadata
  analyzedAt     DateTime @default(now())

  automation Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  alerts     SentimentAlert[]

  @@index([automationId])
  @@index([analyzedAt])
  @@index([sentiment])
}


model PremiumAnalytics {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String   @db.Uuid
  date                  DateTime @db.Date
  totalAnalyses         Int      @default(0)
  platinumLeads         Int      @default(0)
  goldLeads             Int      @default(0)
  silverLeads           Int      @default(0)
  bronzeLeads           Int      @default(0)
  totalEstimatedRevenue Decimal  @default(0) @db.Decimal(10, 2)
  totalExpectedRevenue  Decimal  @default(0) @db.Decimal(10, 2)
  averageROI            Decimal  @default(0) @db.Decimal(5, 2)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// Revenue metrics for business intelligence
model RevenueMetrics {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String   @db.Uuid
  date                  DateTime @db.Date
  totalEstimatedRevenue Decimal  @default(0) @db.Decimal(10, 2)
  totalExpectedRevenue  Decimal  @default(0) @db.Decimal(10, 2)
  qualifiedLeads        Int      @default(0)
  averageROI            Decimal  @default(0) @db.Decimal(5, 2)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// Revenue opportunities tracking
model RevenueOpportunity {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId                String   @db.Uuid
  userId                String   @db.Uuid
  estimatedValue        Decimal  @db.Decimal(10, 2)
  expectedRevenue       Decimal  @db.Decimal(10, 2)
  roi                   Decimal  @db.Decimal(5, 2)
  conversionProbability Decimal  @db.Decimal(3, 2)
  leadTier              String // PLATINUM, GOLD, SILVER, BRONZE
  status                String   @default("ACTIVE") // ACTIVE, CONVERTED, LOST
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relationships
  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([leadTier])
  @@index([status])
}

// Scheduled follow-up actions
model ScheduledAction {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId       String    @db.Uuid
  action       String // immediate_call, send_proposal, follow_up_call, etc.
  scheduledFor DateTime
  status       String    @default("PENDING") // PENDING, EXECUTED, CANCELLED
  executedAt   DateTime?
  result       String? // Result of the action execution
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([scheduledFor])
  @@index([status])
}

model CrmSyncSettings {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String   @unique @db.Uuid
  autoSyncQualified    Boolean  @default(true)
  createDealsHighValue Boolean  @default(true)
  syncLeadScores       Boolean  @default(true)
  realTimeSync         Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationship to User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("CrmSyncSettings")
}

model SentResponse {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recipientKey    String // pageId_senderId_messageType
  responseHash    String // SHA256 hash of response content
  responseContent String // First 1000 chars of response for debugging
  messageType     String // "DM" or "COMMENT"
  automationId    String?
  sentAt          DateTime @default(now())

  @@index([recipientKey])
  @@index([responseHash])
  @@index([sentAt])
  @@index([recipientKey, sentAt])
}

model SentimentAlert {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  automationId      String
  senderId          String
  alertType         String // e.g., "high_risk_customer", "churn_warning", etc.
  sentiment         String // "positive", "negative", "neutral"
  confidence        Float
  riskLevel         String // "low", "medium", "high"
  urgencyLevel      String // "low", "medium", "high"
  satisfactionLevel String // "very_dissatisfied", "dissatisfied", "neutral", "satisfied", "very_satisfied"
  insights          String? // JSON string containing detailed insights
  triggeredAt       DateTime  @default(now())
  resolved          Boolean   @default(false)
  resolvedAt        DateTime?
  resolvedBy        String? // User ID who resolved the alert
  notes             String? // Resolution notes
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  sentimentAnalysis   SentimentAnalysis? @relation(fields: [sentimentAnalysisId], references: [id])
  sentimentAnalysisId String?            @db.Uuid

  @@index([automationId])
  @@index([senderId])
  @@index([riskLevel])
  @@index([resolved])
  @@index([triggeredAt])
  @@map("SentimentAlert")
}

model Alert {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @db.Uuid
  type       String // PLATINUM_LEAD, HIGH_VALUE_OPPORTUNITY, etc.
  title      String
  message    String    @db.Text
  priority   String // LOW, MEDIUM, HIGH, URGENT
  leadId     String?   @db.Uuid
  metadata   Json? // Additional alert data
  resolved   Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy String?   @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  lead Lead? @relation(fields: [leadId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([resolved])
  @@index([createdAt])
}


model GeneralNotification {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String  @db.Uuid
  businessId String? @db.Uuid

  // Notification content
  type    GeneralNotificationType
  title   String
  message String
  isRead  Boolean                 @default(false)

  // Optional metadata and action
  metadata  Json? // Store additional data like IDs, counts, etc.
  actionUrl String? // URL to navigate to when clicked

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  readAt    DateTime? // When the notification was read

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([businessId])
}

enum GeneralNotificationType {
  LEAD_GENERATED
  LEAD_QUALIFIED
  AUTOMATION_COMPLETED
  AUTOMATION_ERROR
  CAMPAIGN_STARTED
  CAMPAIGN_COMPLETED
  INFLUENCER_APPLIED
  INFLUENCER_ACCEPTED
  WORKFLOW_ACTIVATED
  WORKFLOW_COMPLETED
  WORKFLOW_ASSIGNED
  WORKFLOW_EDIT_REQUEST
  EDIT_REQUESTED
  CRM_SYNC_SUCCESS
  CRM_SYNC_ERROR
  SYSTEM_ALERT
  BUSINESS_UPDATE
}

model AdminWorkflowAssignment {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminUserId         String                @db.Uuid
  adminUser           User                  @relation(fields: [adminUserId], references: [id], onDelete: Cascade)
  requestId           String                @db.Uuid
  request             CustomWorkflowRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  assignedAt          DateTime              @default(now())
  estimatedCompletion DateTime?
  actualCompletion    DateTime?
  notes               String?               @db.Text

  @@index([adminUserId])
  @@index([requestId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId          String             @unique
  email            String             @unique
  firstname        String?            @unique
  lastname         String?            @unique
  phone            String?            @unique
  phoneVerified    Boolean            @default(false)
  isAdmin          Boolean            @default(false)
  isInfluencer     Boolean            @default(false)
  isABusiness      Boolean            @default(false)
  createdAt        DateTime           @default(now())
  subscription     Subscription?
  integrations     Integrations[]
  automations      Automation[]
  businesses       Business[]
  marketingInfo    MarketingInfo[]
  scheduledContent ScheduledContent[]
  auditLogs        AuditLog[]
  sentMessages     ChatMessage[]      @relation("SentMessages")
  receivedMessages ChatMessage[]      @relation("ReceivedMessages")
  notifications    UserNotification[]
  emails           Email[]
  uploadedAttachments  ChatAttachment[]   @relation("UploadedAttachments")
  receivedAttachments  ChatAttachment[]   @relation("ReceivedAttachments")
  invoices             Invoice[]          @relation("UserInvoices")
  payments             Payment[]          @relation("UserPayments")
  referralCodes        ReferralCode[]     @relation("UserReferralCodes")
  referrals            Referral[]         @relation("UserReferrals")
  referredBy           Referral[]         @relation("ReferredUsers")
  commissionPayouts    CommissionPayout[] @relation("UserCommissionPayouts")
  referredByCode       String?
  affiliate            AffiliateUser?
  affiliateReferrals   AffiliateReferral[] @relation("referredUser")
  whatsAppBusinesses   WhatsAppBusiness[]
  whatsAppRules        WhatsAppRule[]
  whatsAppTemplates    WhatsAppTemplate[]

  leads             Lead[]
  leadScoringRules  LeadScoringRule[]
  leadQualificationRule LeadQualificationRule[]
  leadNurturingSequence LeadNurturingSequence[]
  crmIntegration    CrmIntegration[]
  n8nConnection     N8nConnection[]
  n8nWorkflows      N8nWorkflow[]
  leadTag           LeadTag[]
  userWorkflow      UserWorkflow[]
  customWorkflowRequest  CustomWorkflowRequest[]

 
  influencers       Influencer[]
  campaigns         Campaign[]
  influencerLists   InfluencerList[]
  influencerImports InfluencerImport[]
  portalSettings    PortalSettings[]
  aiDiscoverySettings AIDiscoverySettings?
  dataSourceSettings DataSourceSettings?

  importHistory       ImportHistory[]
  instagramCredentials InstagramCredentials?

  
  businessProfile               BusinessProfile?
  businessProfilesDescription   BusinessProfileDescription[]
  savedSearches                 SavedSearch[]        // Add this line
  chatParticipations            CollabChatParticipant[] // Add this line

  onboardingProgress  OnboardingProgress?

  
}

model ScheduledContent {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instagramPostId  String?     @unique
  caption          String
  mediaType        String
  mediaUrl         String
  thumbnailUrl     String?
  permalink        String?
  scheduledDate    DateTime
  publishedDate    DateTime?
  mediaProductType String?
  automation       Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String?     @db.Uuid
  status           String      @default("scheduled")
  User             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?     @db.Uuid
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model MarketingInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?
  phone     String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
}



model Business {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String?
  businessName              String
  businessType              String
  businessDescription       String
  industry                  String
  automationSetupComplete   Boolean   @default(false)
  automationSetupDate       DateTime?
  automationAdditionalNotes String?
  automationGoals           Json?
  customerJourney           Json?
  features                  Json?
  businessTypeData          Json?
  websiteAnalysis           Json?
  targetAudience            String
  website                   String
  instagramHandle           String
  whatsappNumber            String?   // Added for WhatsApp
  pinterestHandle           String?   // Added for Pinterest
  twitterHandle             String?   // Added for Twitter
  facebookPageId            String?   // Added for Facebook
  linkedinProfileId         String?   // Added for LinkedIn
  tiktokHandle              String?   // Added for TikTok
  welcomeMessage            String
  responseLanguage          String
  businessHours             String
  autoReplyEnabled          Boolean
  promotionMessage          String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  User                      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String?   @db.Uuid

  learningTopics            String[]
  growthChallenges          String[]
  goalStatement             String?
  logo                      String?
  location                  String?
  size                      String?
  influencerRatings         InfluencerRating[]
  campaigns                 Campaign[]
  opportunities             Opportunity[]
  savedSearches             SavedSearch[]
  chatParticipations        CollabChatParticipant[]
  onboardingCompleted       Boolean @default(false)
}



model Integrations {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           INTEGRATIONS @default(INSTAGRAM)
  createdAt      DateTime     @default(now())
  User           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?      @db.Uuid
  token          String       @unique
  expiresAt      DateTime?    
  
  // Instagram-specific fields
  instagramId    String?      @unique
  username       String?
  fullName       String?
  profilePicture String?
  followersCount Int?
  followingCount Int?
  postsCount     Int?
  
  // WhatsApp-specific fields
  phoneNumberId  String?      @unique
  phoneNumber    String?
  
  // Facebook-specific fields
  pageId         String?      @unique
  pageName       String?
  
  // Pinterest-specific fields
  pinterestId    String?      @unique
  boardCount     Int?
  
  // Twitter-specific fields
  twitterId      String?      @unique
  tweetCount     Int?
  
  // LinkedIn-specific fields
  linkedinId     String?      @unique
  
  // TikTok-specific fields
  tiktokId       String?      @unique
  
  lastUpdated    DateTime     @default(now())
}

model Automation {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String             @default("New Automation")
  createdAt      DateTime           @default(now())
  active         Boolean            @default(false)
  platform       INTEGRATIONS       @default(INSTAGRAM) // Added to specify which platform this automation is for
  trigger        Trigger[]
  businessProfilesDescription BusinessProfileDescription?
  listener       Listener?
  posts          Post[]
  leads          Lead[]
  dms            Dms[]
  messages       Message[]
  conversations  Conversation[]
  User           User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?            @db.Uuid
  keywords       Keyword[]
  scheduledPosts ScheduledContent[]

}

model Message {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String
  senderId     String
  message      String
  isFromBot    Boolean
  createdAt    DateTime    @default(now())
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Conversation {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pageId       String      @unique
  messages     Json[] // This will store an array of message objects
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
  createdAt    DateTime    @default(now())
  senderId     String?
  reciever     String?
  message      String?
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postid       String
  caption      String?
  media        String
  mediaType    MEDIATYPE   @default(IMAGE)
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model ConversationState {
  id        String   @id @default(cuid())
  userId    String   @unique
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listener {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @unique @db.Uuid
  listener     LISTENERS  @default(MESSAGE)
  prompt       String
  commentReply String?
  lastComment  String?
  lastDm       String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}


enum INTEGRATIONS {
  INSTAGRAM
  WHATSAPP
  FACEBOOK
  PINTEREST
  TWITTER
  LINKEDIN
  TIKTOK
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  message   String
  type      String   // "user", "subscription", "automation", "system", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  action     String
  target     String
  details    String?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
}

model Incident {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  severity    String    // "low", "medium", "high", "critical"
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
}


model ChatMessage {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  senderId    String   @db.Uuid
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String?  @db.Uuid
  receiver    User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  isFromAdmin Boolean  @default(false)
  isPending   Boolean  @default(false)
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



// Enhanced notification system
model UserNotification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String   // "chat", "automation", "subscription", etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageTemplate {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  content     String
  category    String?
  tags        String[]
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model EmailTemplate {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  subject     String
  content     String         @db.Text
  description String?
  category    String         @default("general")
  isDefault   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  emails      Email[]
  campaigns   EmailCampaign[]
}

model Email {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject      String
  content      String        @db.Text
  recipientId  String        @db.Uuid
  recipient    User          @relation(fields: [recipientId], references: [id])
  templateId   String?       @db.Uuid
  template     EmailTemplate? @relation(fields: [templateId], references: [id])
  campaignId   String?       @db.Uuid
  campaign     EmailCampaign? @relation(fields: [campaignId], references: [id])
  status       EmailStatus   @default(SCHEDULED)
  scheduledFor DateTime?
  sentAt       DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model EmailCampaign {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  templateId  String        @db.Uuid
  template    EmailTemplate @relation(fields: [templateId], references: [id])
  status      CampaignStatus @default(DRAFT)
  scheduledFor DateTime?
  sentAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  emails      Email[]
}


enum EmailStatus {
  SCHEDULED
  SENT
  FAILED
  OPENED
  CLICKED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  CANCELLED
}


model ChatAttachment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename    String
  filePath    String
  fileType    String
  fileSize    Int
  uploadedBy  String    @db.Uuid
  uploader    User      @relation("UploadedAttachments", fields: [uploadedBy], references: [id])
  receiverId  String?   @db.Uuid
  receiver    User?     @relation("ReceivedAttachments", fields: [receiverId], references: [id])
  createdAt   DateTime  @default(now())
}


model Invoice {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceNumber   String          @unique
  userId          String          @db.Uuid
  user            User            @relation("UserInvoices", fields: [userId], references: [id])
  amount          Float
  tax             Float           @default(0)
  total           Float
  currency        String          @default("USD")
  status          InvoiceStatus   @default(DRAFT)
  dueDate         DateTime
  issueDate       DateTime        @default(now())
  paidDate        DateTime?
  notes           String?
  items           InvoiceItem[]
  payments        Payment[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model InvoiceItem {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId   String    @db.Uuid
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Int
  unitPrice   Float
  amount      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId       String        @db.Uuid
  invoice         Invoice       @relation(fields: [invoiceId], references: [id])
  userId          String        @db.Uuid
  user            User          @relation("UserPayments", fields: [userId], references: [id])
  amount          Float
  currency        String        @default("USD")
  paymentMethod   PaymentMethod
  transactionId   String?
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime      @default(now())
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}


model ReferralProgram {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  commissionType    CommissionType      @default(PERCENTAGE)
  commissionValue   Float               // Percentage or fixed amount
  minimumPayout     Float               @default(0)
  active            Boolean             @default(true)
  referralCodes     ReferralCode[]
  referrals         Referral[]
  commissionPayouts CommissionPayout[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ReferralCode {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code              String          @unique
  userId            String          @db.Uuid
  user              User            @relation("UserReferralCodes", fields: [userId], references: [id])
  programId         String          @db.Uuid
  program           ReferralProgram @relation(fields: [programId], references: [id])
  active            Boolean         @default(true)
  referrals         Referral[]      @relation("ReferralsByCode")
  clicks            Int             @default(0)
  conversions       Int             @default(0)
  conversionRate    Float?          // Calculated field
  totalCommission   Float           @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Referral {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrerId        String          @db.Uuid
  referrer          User            @relation("UserReferrals", fields: [referrerId], references: [id])
  referredUserId    String?         @db.Uuid
  referredUser      User?           @relation("ReferredUsers", fields: [referredUserId], references: [id])
  referralCodeId    String          @db.Uuid
  referralCode      ReferralCode    @relation("ReferralsByCode", fields: [referralCodeId], references: [id])
  programId         String          @db.Uuid
  program           ReferralProgram @relation(fields: [programId], references: [id])
  status            ReferralStatus  @default(PENDING)
  commissionAmount  Float?
  commissionPaid    Boolean         @default(false)
  commissionPayoutId String?        @db.Uuid
  commissionPayout  CommissionPayout? @relation(fields: [commissionPayoutId], references: [id])
  conversionDate    DateTime?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model CommissionPayout {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String          @db.Uuid
  user              User            @relation("UserCommissionPayouts", fields: [userId], references: [id])
  programId         String          @db.Uuid
  program           ReferralProgram @relation(fields: [programId], references: [id])
  amount            Float
  status            PayoutStatus    @default(PENDING)
  paymentMethod     PaymentMethod   @default(BANK_TRANSFER)
  paymentDetails    Json?
  referrals         Referral[]
  processedDate     DateTime?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ReferralClick {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referralCodeId    String          @db.Uuid
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime        @default(now())
}

enum CommissionType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ReferralStatus {
  PENDING
  CONVERTED
  EXPIRED
  REJECTED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}


// New Affiliate Program model
model AffiliateProgram {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  commissionRate    Float    // Percentage
  cookieDuration    Int      // Days
  minimumPayout     Float    @default(50)
  status            String   @default("active") // active, paused, inactive
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  termsAndConditions String?
  
  // Relations
  affiliates        AffiliateUser[]
  referrals         AffiliateReferral[]
  payouts           AffiliatePayout[]
}

// Model for both registered users and external affiliates
model AffiliateUser {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String?  @unique @db.Uuid  // Added @unique and @db.Uuid
  name              String
  email             String   @unique
  isApproved        Boolean  @default(false)
  status            String   @default("pending") // pending, active, suspended
  commissionRate    Float?   // Custom rate (overrides program default if set)
  balance           Float    @default(0)
  totalEarned       Float    @default(0)
  referralCode      String   @unique
  bio               String?
  paymentDetails    Json?    // Payment method details (PayPal email, bank info, etc.)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  program           AffiliateProgram @relation(fields: [programId], references: [id])
  programId         String   @db.Uuid  // Added @db.Uuid
  referrals         AffiliateReferral[]
  clicks            AffiliateClick[]
  payouts           AffiliatePayout[]
}

model AffiliateReferral {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referredUserId    String?  @db.Uuid  // Added @db.Uuid
  conversionType    String   // registration, subscription, purchase, etc.
  amount            Float    // Amount of the transaction that generated the commission
  commissionAmount  Float    // Actual commission amount
  status            String   @default("pending") // pending, approved, rejected, paid
  conversionDate    DateTime @default(now())
  notes             String?
  
  // Relations
  referredUser      User?    @relation(name: "referredUser", fields: [referredUserId], references: [id], onDelete: SetNull)
  affiliate         AffiliateUser @relation(fields: [affiliateId], references: [id])
  affiliateId       String   @db.Uuid  // Added @db.Uuid
  program           AffiliateProgram @relation(fields: [programId], references: [id])
  programId         String   @db.Uuid  // Added @db.Uuid
  payout            AffiliatePayout? @relation(fields: [payoutId], references: [id])
  payoutId          String?  @db.Uuid  // Added @db.Uuid
}

model AffiliateClick {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ipAddress         String?
  userAgent         String?
  referrer          String?
  timestamp         DateTime @default(now())
  converted         Boolean  @default(false)
  
  // Relations
  affiliate         AffiliateUser @relation(fields: [affiliateId], references: [id])
  affiliateId       String   @db.Uuid  // Added @db.Uuid
}

model AffiliatePayout {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount            Float
  status            String   @default("pending") // pending, processing, completed, failed
  paymentMethod     String   // paypal, bank_transfer, etc.
  transactionId     String?
  notes             String?
  processedAt       DateTime?
  createdAt         DateTime @default(now())
  
  // Relations
  affiliate         AffiliateUser @relation(fields: [affiliateId], references: [id])
  affiliateId       String   @db.Uuid  // Added @db.Uuid
  program           AffiliateProgram @relation(fields: [programId], references: [id])
  programId         String   @db.Uuid  // Added @db.Uuid
  referrals         AffiliateReferral[]
}



// WhatsApp-specific models to add to your existing schema

model WhatsAppBusiness {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String   @db.Uuid
  businessName      String
  phoneNumber       String
  phoneNumberId     String   @unique
  wabaId            String
  accessToken       String
  refreshToken      String?
  tokenExpiresAt    DateTime
  verificationStatus String   @default("pending") // pending, verified, failed
  webhookSecret     String   @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsAppRules     WhatsAppRule[]
  whatsAppStats     WhatsAppStat[]
  whatsAppTemplates WhatsAppTemplate[]

  @@index([userId])
}

model WhatsAppRule {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  trigger      String   // keyword, new_chat, no_response, button_click, location, media, scheduled
  triggerValue String?  // comma-separated keywords or other trigger-specific values
  response     String   // The message to send
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  userId             String   @db.Uuid
  whatsappBusinessId String?  @db.Uuid

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappBusiness  WhatsAppBusiness? @relation(fields: [whatsappBusinessId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([whatsappBusinessId])
}

model WhatsAppTemplate {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  status     String   // approved, pending, rejected
  category   String   // MARKETING, UTILITY, AUTHENTICATION
  components Json     // Array of template components
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  userId             String   @db.Uuid
  whatsappBusinessId String?  @db.Uuid

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappBusiness  WhatsAppBusiness? @relation(fields: [whatsappBusinessId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([whatsappBusinessId])
}

model WhatsAppStat {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date              DateTime @default(now())
  messagesSent      Int      @default(0)
  messagesReceived  Int      @default(0)
  automationTriggered Int    @default(0)
  activeUsers       Int      @default(0)
  
  whatsappBusinessId String   @db.Uuid
  whatsappBusiness   WhatsAppBusiness @relation(fields: [whatsappBusinessId], references: [id], onDelete: Cascade)
  
  @@index([whatsappBusinessId])
  @@index([date])
}


model Influencer {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String               @db.Uuid @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Profile Information
  name                String
  username            String               @unique
  bio                 String?
  profilePicture      String?
  location            String?
  niche               String?
  email               String?
  website             String?
  contactInfo         Json?
  notes               String?
  tags                String[]
  verified            Boolean             @default(false)
  isAvailableForHire  Boolean             @default(true)
  platforms           String[]

  // Stats
  followers           Int                 @default(0)
  following           Int                 @default(0)
  postsCount          Int                 @default(0)
  engagementRate      Float               @default(0)
  averageLikes        Int                 @default(0)
  averageComments     Int                 @default(0)
  totalEarnings       Float               @default(0)
  pendingEarnings     Float               @default(0)
  currentMonthEarnings Float              @default(0)
  monthlyEarningsGrowth Float             @default(0)

  // Business Metrics
  brandFit            Int?
  audienceMatch       Int?
  estimatedCost       Float?
  audienceDemographics Json?
  authenticity        Int?
  growthRate          Float?

  // Status
  statuss             String              @default("ACTIVE")
  status              InfluencerStatus    @default(DISCOVERED)
  source              InfluencerSource    @default(INSTAGRAM_API)
  sourceId            String?
  portalSignup        Boolean             @default(false)
  lastActive          DateTime            @default(now())

  // AI/Discovery
  aiDiscoveryScore    Float?
  aiDiscoveryData     Json?

  rating              Float               @default(0)
  completedCampaigns  Int                @default(0)

  rates               InfluencerRates[]
  
  application         Application[]
  ratings             InfluencerRating[]

  // Relations
  metrics             InfluencerMetrics[]
  campaigns           CampaignInfluencer[]
  lists               InfluencerListInfluencer[]
  list                InfluencerList[]    @relation("InfluencerToList")
  socialAccounts      SocialAccount[]
  contentTypes        ContentType[]
  contentSamples      ContentSample[]
  //rate                InfluencerRates?
  earnings            InfluencerEarnings[]
  applications        OpportunityApplication[]
  chatParticipations  CollabChatParticipant[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Onboarding-specific fields
  personalityType       String?
  contentStyle          String?
  selectedContentDays   Int[]
  incomeGoal            Float?
  brandCollabTypes      String[]
  contentFrequency      String?
  goalStatement         String?
  onboardingCompleted   Boolean @default(false)

  @@index([userId])
  @@index([username])
  @@index([source])
  @@index([niche])
}


model InfluencerMetrics {
  id                      String               @id @default(uuid())
  influencerId            String               @db.Uuid
  influencer              Influencer           @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  date                    DateTime             @default(now())
  profileViews            Int                  @default(0)
  profileViewsGrowth      Float                @default(0)
  profileViewsPercentile  Float                @default(0)
  searchAppearances       Int                  @default(0)
  searchAppearancesPercentile Float            @default(0)
  campaignInvites         Int                  @default(0)
  campaignInvitesGrowth   Float                @default(0)
  brandContacts           Int                  @default(0)
  brandContactsPercentile Float                @default(0)
  engagementRate              Float                @default(0)
  engagementGrowth        Float                @default(0)
  followers               Int                  @default(0)
  followersGrowth         Float                @default(0)
  averageLikes            Int?
  averageComments         Int?
  reachEstimate           Int?
  acceptanceRate          Float                @default(0)
  acceptanceRateChange    Float                @default(0)
  completionRate          Float                @default(0)
  completionRateChange    Float                @default(0)
  clientSatisfaction      Float                @default(0)
  reviewCount             Int                  @default(0)
  createdAt               DateTime             @default(now())
  impressionsEstimate     Int?
  impressions             Int
  impressionsGrowth       Float
  metricSource            String?

  @@index([influencerId])
  @@index([date])
}


model Campaign {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  startDate         DateTime?
  endDate           DateTime?
  budget            Float?
  status            MyCampaignStatus    @default(DRAFT)
  goals             Json?
  brief             String?
  guidelines        String?
  hashtags          String[]
  mentions          String[]
  influencers       CampaignInfluencer[]
  analytics         CampaignAnalytics[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String              @db.Uuid
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessProfileId String?             @db.Uuid
  businessProfile   Business?            @relation(fields: [businessProfileId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([status])
  @@index([businessProfileId])
}

model CampaignInfluencer {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId        String     @db.Uuid
  campaign          Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencerId      String     @db.Uuid
  influencer        Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  status            String     @default("invited")
  rate              Float?
  deliverables      Json?
  contentUrls       String[]
  notes             String?
  dueDate           DateTime?
  progress          Int        @default(0)
  performance       Json?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  @@unique([campaignId, influencerId])
  @@index([campaignId])
  @@index([influencerId])
}


model CampaignAnalytics {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId        String     @db.Uuid
  campaign          Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  date              DateTime   @default(now())
  reach             Int?
  impressions       Int?
  engagement        Int?
  clicks            Int?
  conversions       Int?
  roi               Float?
  costPerEngagement Float?
  costPerClick      Float?
  costPerConversion Float?
  metrics           Json?      // Additional metrics
  
  @@index([campaignId])
  @@index([date])
}

model InfluencerList {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  influencer        Influencer[] @relation("InfluencerToList")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String       @db.Uuid
  influencers       InfluencerListInfluencer[]
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model InfluencerImport {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName          String
  recordCount       Int
  successCount      Int
  errorCount        Int
  status            String     // completed, failed, partial
  importType        String     // add_new, update_existing, replace_all
  errors            Json?      // Error details
  createdAt         DateTime   @default(now())
  userId            String     @db.Uuid
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model PortalSettings {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  portalUrl         String     @unique
  isActive          Boolean    @default(true)
  portalAccess      String     @default("public") // public, invite, application
  title             String     @default("Join Our Influencer Network")
  description       String?
  logo              String?
  primaryColor      String?
  secondaryColor    String?
  accentColor       String?
  textColor         String?
  customCss         String?
  customHeader      String?
  customFooter      String?
  notificationEmail String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  userId            String     @db.Uuid
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  formFields        PortalFormField[]
  verificationSettings PortalVerificationSettings?
  
  @@index([userId])
}

model PortalFormField {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label             String
  type              String     // text, email, number, select, etc.
  isRequired        Boolean    @default(false)
  options           Json?      // For select fields
  order             Int
  portalId          String     @db.Uuid
  portal            PortalSettings @relation(fields: [portalId], references: [id], onDelete: Cascade)
  
  @@index([portalId])
}

model PortalVerificationSettings {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  emailVerification Boolean    @default(true)
  instagramAuth     Boolean    @default(true)
  manualReview      Boolean    @default(true)
  metricsVerification Boolean  @default(true)
  minFollowers      Int        @default(1000)
  minEngagementRate Float      @default(2)
  minAccountAge     Int        @default(3) // in months
  autoApprove       Boolean    @default(true)
  portalId          String     @unique @db.Uuid
  portal            PortalSettings @relation(fields: [portalId], references: [id], onDelete: Cascade)
}

model AIDiscoverySettings {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contentAnalysis   Boolean    @default(true)
  audienceOverlap   Boolean    @default(true)
  engagementPattern Boolean    @default(true)
  brandAlignment    Boolean    @default(true)
  growthPrediction  Boolean    @default(true)
  fraudDetection    Boolean    @default(true)
  trainingFrequency String     @default("weekly") // daily, weekly, monthly
  lastTraining      DateTime?
  minConfidenceScore Int       @default(75)
  userId            String     @unique @db.Uuid
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model DataSourceSettings {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instagramApiActive Boolean   @default(true)
  thirdPartyActive  Boolean    @default(true)
  webScrapingActive Boolean    @default(true)
  portalActive      Boolean    @default(true)
  aiDiscoveryActive Boolean    @default(true)
  instagramRefreshRate Int     @default(6) // hours
  thirdPartyRefreshRate Int    @default(24) // hours
  webScrapingRateLimit Int     @default(60) // requests per minute
  webScrapingDailyQuota Int    @default(1000) // profiles per day
  rawDataRetention  Int        @default(30) // days
  processedDataRetention Int   @default(365) // days
  userId            String     @unique @db.Uuid
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

enum InfluencerStatus {
  DISCOVERED
  CONTACTED
  NEGOTIATING
  CONTRACTED
  ACTIVE
  INACTIVE
  BLACKLISTED
  IDENTIFIED
}


enum InfluencerSource {
  INSTAGRAM_API
  THIRD_PARTY
  WEB_SCRAPING
  AI_DISCOVERY
  PORTAL_SIGNUP
  MANUAL_IMPORT
  IMPORT
}



enum MyCampaignStatus {
  DRAFT
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}


model ImportHistory {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @unique @db.Uuid
  fileName     String
  recordsTotal Int
  recordsAdded Int
  recordsUpdated Int
  recordsFailed Int
  errors       String[]
  importOption String
  enrichData   Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InstagramCredentials {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @unique @db.Uuid
  appId       String
  appSecret   String
  accessToken String
  tokenExpiry DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model InfluencerListInfluencer {
  listId       String         @unique @db.Uuid
  influencerId String         @unique @db.Uuid
  createdAt    DateTime       @default(now())
  list         InfluencerList @relation(fields: [listId], references: [id], onDelete: Cascade)
  influencer   Influencer     @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@id([listId, influencerId])
}



///////////////////////////////////////////////////////////////////////////


// New models to add to your existing schema


// Business Profile
model BusinessProfile {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String               @unique @db.Uuid
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName         String
  industry            String?
  website             String?
  logo                String?
  description         String?              @db.Text
  location            String?
  size                String?
  foundedYear         Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}



// Social Account
model SocialAccount {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  influencerId        String     @db.Uuid
  influencer          Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  platform            String
  username            String
  handle              String?
  url                 String?
  verified            Boolean    @default(false)
  followers           Int?
  engagement          Float?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@unique([influencerId, platform])
}

// Content Type
model ContentType {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  influencerId        String     @db.Uuid
  influencer          Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  type                String
  createdAt           DateTime   @default(now())

  @@unique([influencerId, type])
}

// Content Sample
model ContentSample {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId           String               @unique @db.Uuid
  profile             Influencer           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  url                 String
  type                String
  createdAt           DateTime             @default(now())
}


// Influencer Rates
model InfluencerRates {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  influencerId        String     @unique @db.Uuid
  influencer          Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  postRate            Float      @default(0)
  platform            String?
  rate                Float?
  contentType         String?
  videoRate           Float      @default(0)
  storyRate           Float      @default(0)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}


// Influencer Earnings
model InfluencerEarnings {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  influencerId        String               @db.Uuid
  influencer          Influencer           @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  campaignId          String?              @db.Uuid
  campaignName        String
  amount              Float
  status              String               @default("PENDING") // PENDING, PAID
  date                DateTime             @default(now())
  createdAt           DateTime             @default(now())

  @@index([influencerId])
  @@index([campaignId])
}

// Saved Search
model SavedSearch {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String               @db.Uuid
  user                User                 @relation(fields: [userId], references: [id])
  businessId          String?              @db.Uuid
  business            Business?            @relation(fields: [businessId], references: [id], onDelete: SetNull)
  name                String
  filters             Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([userId])
  @@index([businessId])
}


// Opportunity
model Opportunity {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId          String               @db.Uuid
  brandName           String               @default("BrandName")
  title               String
  requirements        String?              @db.Text
  platforms           String[]
  contentType       String[]
  description       String        @db.Text
  category          String
  budgetMin         Float
  budgetMax         Float
  budget              Json?
  deadline            DateTime?
  deliveryDate        DateTime?
  location          String?
  minFollowers      Int           @default(0)
  maxFollowers      Int?
  tags                String[]
  minEngagementRate Float         @default(0)
  business          Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  applications      Application[]
  isPublic            Boolean              @default(true)
  status              String               @default("OPEN") // OPEN, CLOSED, COMPLETED
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Relations
  application        OpportunityApplication[]

  @@index([businessId])
  @@index([status])
}

// Opportunity Application
model OpportunityApplication {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opportunityId       String               @db.Uuid
  opportunity         Opportunity          @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  influencerId        String               @db.Uuid
  influencer          Influencer           @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  message             String?              @db.Text
  proposedRate        Float?
  status              String               @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([opportunityId, influencerId])
  @@index([opportunityId])
  @@index([influencerId])
}

// CollabChat
model CollabChat {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Relations
  participants        CollabChatParticipant[]
  messages            CollabMessage[]
}

// CollabChatParticipant
model CollabChatParticipant {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatId              String               @db.Uuid
  chat                CollabChat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId              String               @db.Uuid
  user                User                 @relation(fields: [userId], references: [id])
  influencerId        String?              @db.Uuid
  influencer          Influencer?          @relation(fields: [influencerId], references: [id], onDelete: SetNull)
  businessId          String?              @db.Uuid
  business            Business?            @relation(fields: [businessId], references: [id], onDelete: SetNull)
  joinedAt            DateTime             @default(now())
  
  // Relations
  messages            CollabMessage[]

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
  @@index([influencerId])
  @@index([businessId])
}

// CollabMessage
model CollabMessage {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatId              String               @db.Uuid
  chat                CollabChat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId            String               @db.Uuid
  sender              CollabChatParticipant @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content             String               @db.Text
  contentType         String               @default("text") // text, image, file
  readAt              DateTime?
  createdAt           DateTime             @default(now())
  metadata            Json?

  @@index([chatId])
  @@index([senderId])
}


// Add this to your schema.prisma file

model OnboardingProgress {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String   @unique @db.Uuid
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userType          String   // "influencer" or "regular"
  currentStep       Int      @default(0)
  totalSteps        Int      @default(8)
  lastActiveAt      DateTime @default(now())
  completedAt       DateTime?
  abandonedAt       DateTime?
  remindersSent     Int      @default(0)
  lastReminderAt    DateTime?
  metadata          Json?    // For storing any additional data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  steps             OnboardingStep[]
  
  @@index([userType])
  @@index([completedAt])
  @@index([abandonedAt])
}

model OnboardingStep {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  progressId        String   @db.Uuid
  progress          OnboardingProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  stepNumber        Int
  stepName          String
  status            OnboardingStepStatus @default(NOT_STARTED)
  data              Json?    // Store step-specific data
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([progressId, stepNumber])
  @@index([progressId])
  @@index([status])
}

enum OnboardingStepStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationCode {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNumber String
  code        String
  type        String    @default("SMS")  // SMS, EMAIL, etc.
  expiresAt   DateTime
  used        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([phoneNumber])
  @@index([code])
  @@index([expiresAt])
}

// New models for the opportunity marketplac

model Application {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opportunityId String   @db.Uuid
  influencerId  String   @db.Uuid
  message       String?     @db.Text
  proposal      Float?      // Proposed rate
  status        String      @default("PENDING")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  influencer    Influencer  @relation(fields: [influencerId], references: [id], onDelete: Cascade)
}

model InfluencerRating {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  businessId    String   @db.Uuid
  influencerId  String   @db.Uuid
  rating        Float
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  business    Business?  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  influencer  Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([businessId, influencerId])
}


/////////////////////////////////////////////////////////////////////////////////////////////////



















// Lead Qualification Models
model Lead {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  automationId      String?        @db.Uuid
  automation        Automation?    @relation(fields: [automationId], references: [id], onDelete: SetNull)
  instagramUserId   String
  pageId            String
  name              String?
  email             String?
  phone             String?
  score             Int            @default(0)
  status            LeadStatus     @default(NEW)
  source            String         @default("instagram")
  firstContactDate  DateTime       @default(now())
  lastContactDate   DateTime       @default(now())
  qualifiedDate     DateTime?
  convertedDate     DateTime?
  notes             String?
  tags              String[]
  metadata          Json?
  sentToN8n         Boolean        @default(false)
  n8nWorkflowId     String?
  n8nExecutionId    String?
  interactions      LeadInteraction[]
  qualificationData LeadQualificationData?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([userId])
  @@index([automationId])
  @@index([status])
  @@index([instagramUserId])
  @@index([sentToN8n])
}

model LeadInteraction {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId            String         @db.Uuid
  lead              Lead           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  type              String         // message, comment, reaction
  content           String?
  direction         String         // inbound, outbound
  sentiment         Float?         // -1.0 to 1.0
  intent            Json?          // Detected intents like purchase_intent, information_request
  timestamp         DateTime       @default(now())
  metadata          Json?

  @@index([leadId])
  @@index([timestamp])
}

model LeadQualificationData {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId            String         @unique @db.Uuid
  lead              Lead           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  engagementScore   Int            @default(0)
  intentScore       Int            @default(0)
  sentimentScore    Int            @default(0)
  demographicScore  Int            @default(0)
  frequencyScore    Int            @default(0)
  recencyScore      Int            @default(0)
  qualificationData Json?
  aiAnalysis        Json?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model LeadScoringRule {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  ruleType          String         // keyword, sentiment, frequency, recency, etc.
  condition         String         // contains, equals, greater_than, etc.
  value             String         // The value to compare against
  score             Int            // Points to add/subtract when rule matches
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([userId])
  @@index([ruleType])
}

model N8nWorkflow {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  workflowId        String         // ID in n8n system
  triggerUrl        String?        // Webhook URL to trigger this workflow
  isActive          Boolean        @default(true)
  lastExecuted      DateTime?
  executionCount    Int            @default(0)
  successCount      Int            @default(0)
  failureCount      Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([userId])
  @@index([workflowId])
}

enum LeadStatus {
  NEW
  QUALIFYING
  QUALIFIED
  DISQUALIFIED
  CONVERTED
  NURTURING
  LOST
}



/////////////////////




// n8n Integration Models
model N8nConnection {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  n8nUrl            String
  apiKey            String
  isActive          Boolean        @default(true)
  lastConnected     DateTime       @default(now())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  workflows         N8nWorkflowConfig[]

  @@index([userId])
}

model N8nWorkflowConfig {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  connectionId      String         @db.Uuid
  connection        N8nConnection  @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  workflowId        String         // ID in n8n system
  workflowType      WorkflowType   @default(LEAD_QUALIFICATION)
  triggerUrl        String         // Webhook URL to trigger this workflow
  webhookUrl        String?        // Webhook URL for n8n to call back
  isActive          Boolean        @default(true)
  lastExecuted      DateTime?
  executionCount    Int            @default(0)
  successCount      Int            @default(0)
  failureCount      Int            @default(0)
  configuration     Json?          // Workflow-specific configuration
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([connectionId])
  @@index([workflowType])
}

// CRM Integration Models
model CrmIntegration {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          CrmProvider
  name              String
  apiKey            String
  apiSecret         String?
  baseUrl           String?
  isActive          Boolean        @default(true)
  lastSynced        DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  mappings          CrmFieldMapping[]

  @@index([userId])
  @@index([provider])
}

model CrmFieldMapping {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  integrationId     String         @db.Uuid
  integration       CrmIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  localField        String         // Field in our system
  remoteField       String         // Field in CRM
  isRequired        Boolean        @default(false)
  transformFunction String?        // Optional JS function to transform data
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([integrationId])
}

// Enhanced Lead Qualification Models
model LeadQualificationRule {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  scoreType         ScoreType      @default(OVERALL)
  operator          RuleOperator   @default(GREATER_THAN)
  threshold         Int            // Value to compare against
  weight            Int            @default(1)  // Importance of this rule
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([userId])
  @@index([scoreType])
}

model LeadNurturingSequence {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  steps             LeadNurturingStep[]

  @@index([userId])
}

model LeadNurturingStep {
  id                String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sequenceId        String               @db.Uuid
  sequence          LeadNurturingSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  stepNumber        Int
  name              String
  type              NurturingStepType    @default(MESSAGE)
  content           String?
  delayDays         Int                  @default(0)
  delayHours        Int                  @default(0)
  conditions        Json?                // Conditions for executing this step
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@index([sequenceId])
  @@index([type])
}

model LeadActivity {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId            String         @db.Uuid
  activityType      String         // email_sent, message_sent, viewed_page, etc.
  description       String?
  metadata          Json?
  timestamp         DateTime       @default(now())

  @@index([leadId])
  @@index([activityType])
  @@index([timestamp])
}

model LeadTag {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String         @db.Uuid
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  color             String         @default("#6366F1") // Default indigo color
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

// Enums for the new models
enum WorkflowType {
  LEAD_QUALIFICATION
  LEAD_NURTURING
  CRM_SYNC
  NOTIFICATION
  CUSTOM
}

enum CrmProvider {
  HUBSPOT
  SALESFORCE
  ZOHO
  PIPEDRIVE
  AIRTABLE
  NOTION
  CUSTOM
}

enum ScoreType {
  OVERALL
  ENGAGEMENT
  INTENT
  SENTIMENT
  FREQUENCY
  RECENCY
}

enum RuleOperator {
  GREATER_THAN
  LESS_THAN
  EQUAL_TO
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
}

enum NurturingStepType {
  MESSAGE
  EMAIL
  WEBHOOK
  DELAY
  CONDITION
  CRM_UPDATE
}


//////////////////

////////////////////////


// New models for n8n Integration Platform

model WorkflowTemplate {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String              @db.Text
  category          WorkflowCategory
  icon              String?
  featured          Boolean             @default(false)
  popular           Boolean             @default(false)
  complexity        WorkflowComplexity  @default(MEDIUM)
  estimatedSetupTime Int                @default(15) // in minutes
  requiredIntegrations String[]
  configurationSchema Json               // JSON schema for configuration form
  n8nTemplateId     String?             // ID of template in n8n system
  visualRepresentation Json?            // Simplified visual representation of workflow steps
  expectedOutcomes  String[]            // Array of expected outcomes
  useCases          String[]            // Array of use cases
  createdAt         DateTime            @default(now())
  isVerified        Boolean?             @default(false)
  lastVerified      DateTime?           
  updatedAt         DateTime            @updatedAt
  isActive          Boolean             @default(true)
  
  // Relations
  userWorkflows     UserWorkflow[]
  customRequests    CustomWorkflowRequest[]

  @@index([category])
  @@index([featured])
  @@index([popular])
}





model UserWorkflow {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String              @db.Uuid
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId        String              @db.Uuid
  template          WorkflowTemplate    @relation(fields: [templateId], references: [id], onDelete: Restrict)
  name              String              // User-defined name
  configuration     Json                // User's configuration values
  n8nWorkflowId     String?             // ID of the actual workflow in n8n
  webhookUrl        String?             // Webhook URL for this workflow instance
  status            WorkflowStatus      @default(DRAFT)
  isActive          Boolean             @default(false)
  lastActivated     DateTime?
  lastDeactivated   DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  executions        WorkflowExecution[]
  credentials       WorkflowCredential[]

  @@index([userId])
  @@index([templateId])
  @@index([status])
  @@index([isActive])
}

model WorkflowExecution {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflowId        String              @db.Uuid
  workflow          UserWorkflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  n8nExecutionId    String?             // ID of execution in n8n
  status            ExecutionStatus     @default(PENDING)
  startedAt         DateTime            @default(now())
  completedAt       DateTime?
  duration          Int?                // Duration in milliseconds
  success           Boolean?
  errorMessage      String?
  inputData         Json?               // Input data (sanitized)
  outputData        Json?               // Output data (sanitized)
  resourceUsage     Json?               // CPU, memory, etc.
  businessImpact    Json?               // Business metrics (emails sent, etc.)
  
  // Relations
  events            ExecutionEvent[]

  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
}

model ExecutionEvent {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  executionId       String              @db.Uuid
  execution         WorkflowExecution   @relation(fields: [executionId], references: [id], onDelete: Cascade)
  timestamp         DateTime            @default(now())
  eventType         String              // step_started, step_completed, error, etc.
  nodeId            String?             // ID of the node in n8n
  nodeName          String?             // Name of the node in n8n
  message           String?
  data              Json?

  @@index([executionId])
  @@index([timestamp])
  @@index([eventType])
}

model WorkflowCredential {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflowId        String              @db.Uuid
  workflow          UserWorkflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  name              String              // Name of the credential
  type              String              // api_key, oauth, etc.
  value             String              // Encrypted credential value
  expiresAt         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([workflowId])
}


model CustomWorkflowRequest {
  id                String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String                  @db.Uuid
  user              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId        String?                 @db.Uuid
  template          WorkflowTemplate?       @relation(fields: [templateId], references: [id], onDelete: SetNull)
  title             String
  businessObjective String                  @db.Text
  requiredIntegrations String[]
  processDescription String                 @db.Text
  exampleDataUrl    String?                 // URL to uploaded example data
  budget            Float?
  urgency           RequestUrgency          @default(NORMAL)
  status            CustomRequestStatus     @default(SUBMITTED)
  aiSuggestions     Json?                   // AI-generated suggestions
  adminNotes        String?                 @db.Text
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  
  // Relations
  messages          CustomRequestMessage[]

  @@index([userId])
  @@index([status])
}

model CustomRequestMessage {
  id                String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requestId         String                  @db.Uuid
  request           CustomWorkflowRequest   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  senderId          String                  @db.Uuid
  isFromAdmin       Boolean                 @default(false)
  message           String                  @db.Text
  attachmentUrl     String?
  createdAt         DateTime                @default(now())

  @@index([requestId])
  @@index([createdAt])
}

model WorkflowAnalytics {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String              @db.Uuid
  date              DateTime            @default(now())
  totalExecutions   Int                 @default(0)
  successfulExecutions Int              @default(0)
  failedExecutions  Int                 @default(0)
  averageDuration   Float?              // Average duration in milliseconds
  resourceUsage     Json?               // Aggregated resource usage
  businessImpact    Json?               // Aggregated business metrics
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model WorkflowNotification {
  id                String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String                  @db.Uuid
  workflowId        String?                 @db.Uuid
  executionId       String?                 @db.Uuid
  type              NotificationType
  title             String
  message           String
  isRead            Boolean                 @default(false)
  createdAt         DateTime                @default(now())
  
  @@index([userId])
  @@index([workflowId])
  @@index([isRead])
  @@index([createdAt])
}

// Enums for n8n Integration Platform
enum WorkflowCategory {
  MARKETING
  SALES
  CUSTOMER_SUPPORT
  DATA_PROCESSING
  DOCUMENT_MANAGEMENT
  SOCIAL_MEDIA
  COMMUNICATION
  INTEGRATION
  UTILITY
  CUSTOM
}

enum WorkflowComplexity {
  SIMPLE
  MEDIUM
  COMPLEX
}

enum WorkflowStatus {
  DRAFT
  CONFIGURING
  READY
  ACTIVE
  INACTIVE
  ERROR
  ARCHIVED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELED
  TIMEOUT
}

enum RequestUrgency {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum CustomRequestStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  IN_DEVELOPMENT
  READY_FOR_TESTING
  COMPLETED
  REJECTED
  CANCELED
}

enum NotificationType {
  EXECUTION_STARTED
  EXECUTION_COMPLETED
  EXECUTION_FAILED
  WORKFLOW_ACTIVATED
  WORKFLOW_DEACTIVATED
  WORKFLOW_ERROR
  CUSTOM_REQUEST_UPDATE
  SYSTEM_NOTIFICATION
}







model BusinessProfileDescription {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  automationId String   @db.Uuid @unique
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  automation  Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([automationId])
}



enum SUBSCRIPTION_PLAN {
  FREE
  PRO
  TEAM
}

enum SUBSCRIPTION_STATUS {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
}





model Subscription {
  id                      String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User                    User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String?             @unique @db.Uuid
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt @default(now())
  
  plan                    SUBSCRIPTION_PLAN   @default(FREE)
  status                  SUBSCRIPTION_STATUS @default(ACTIVE)
  
  // Stripe specific fields
  customerId              String?             @unique
  stripeSubscriptionId    String?             @unique
  stripePriceId           String?
  stripeCurrentPeriodStart DateTime?
  stripeCurrentPeriodEnd   DateTime?
  
  // Payment method info
  paymentMethodId         String?
  paymentMethodType       String?
  paymentMethodLast4      String?
  
  // Trial information
  trialStart              DateTime?
  trialEnd                DateTime?
  
  // Cancellation fields
  cancelAtPeriodEnd       Boolean             @default(false)
  canceledAt              DateTime?
}




/////NEWESSST
